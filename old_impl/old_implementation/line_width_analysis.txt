# DXFビューア 線幅表示問題の分析

## 問題点
DXFビューアで線幅の設定を12.0に変更したが、実際の表示では線が細いままになっている。

## ログ出力分析（修正前）
```
INFO: DXFGraphicsViewが初期化されました
INFO: スクリプトファイルの監視を開始: C:\Users\yuuji\Sanyuu2Kouku\cursor_tools\dxf_viewer\dxf_viewer_pyside6.py
INFO: DXFViewerアプリケーションが起動しました (PySide6版)
INFO: アプリケーションの実行を開始します
INFO: DXFファイルを開く: C:/Users/yuuji/Sanyuu2Kouku/cursor_tools/dxf_viewer/sample_dxf/12.25 新規路線.dxf
INFO: DXFファイルを開く: C:/Users/yuuji/Sanyuu2Kouku/cursor_tools/dxf_viewer/sample_dxf/12.25 新規路線.dxf
INFO: DXFファイル読み込み開始: C:/Users/yuuji/Sanyuu2Kouku/cursor_tools/dxf_viewer/sample_dxf/12.25 新規路線.dxf
Found non-unique entity handle #74, data validation is required.
Found non-unique entity handle #74, data validation is required.
INFO: DXFファイル読み込み完了: エンティティ総数=160, エラー数=0
INFO: DXFViewerアプリケーションを終了します
INFO: DXFViewerアプリケーションを終了します
```

## ログ出力分析（修正後、デバッグモード）
```
INFO: 線幅設定をリセットしました。デフォルト値 12.0 を使用します。
INFO: DXFGraphicsViewが初期化されました
INFO: スクリプトファイルの監視を開始: C:\Users\yuuji\Sanyuu2Kouku\cursor_tools\dxf_viewer\dxf_viewer_pyside6.py
INFO: DXFViewerアプリケーションが起動しました (PySide6版)
INFO: アプリケーションの実行を開始します
INFO: DXFファイルを開く: C:/Users/yuuji/Sanyuu2Kouku/cursor_tools/dxf_viewer/sample_dxf/12.25 新規路線.dxf
INFO: DXFファイル読み込み開始: C:/Users/yuuji/Sanyuu2Kouku/cursor_tools/dxf_viewer/sample_dxf/12.25 新規路線.dxf
Found non-unique entity handle #74, data validation is required.
Found non-unique entity handle #74, data validation is required.
INFO: DXFファイル読み込み完了: エンティティ総数=160, エラー数=0
INFO: DXFファイル読み込み開始: C:/Users/yuuji/Sanyuu2Kouku/cursor_tools/dxf_viewer/sample_dxf/12.25 新規路線.dxf
Found non-unique entity handle #74, data validation is required.
Found non-unique entity handle #74, data validation is required.
INFO: DXFファイル読み込み完了: エンティティ総数=160, エラー数=0
INFO: DXFファイル読み込み開始: C:/Users/yuuji/Sanyuu2Kouku/cursor_tools/dxf_viewer/sample_dxf/12.25 新規路線.dxf
Found non-unique entity handle #74, data validation is required.
Found non-unique entity handle #74, data validation is required.
INFO: DXFファイル読み込み完了: エンティティ総数=160, エラー数=0
INFO: デバッグモード: オフ
INFO: デバッグモード: オン
INFO: DXFViewerアプリケーションを終了します
INFO: DXFViewerアプリケーションを終了します
```

### ログ出力の比較と特筆事項

1. **修正された問題**:
   - `DXFファイルを開く`のログが2回連続で表示されていた問題は解消された
   - 線幅設定のリセットが正常に行われている（`線幅設定をリセットしました。デフォルト値 12.0 を使用します。`）

2. **新たに確認された問題**:
   - `DXFファイル読み込み開始`と`DXFファイル読み込み完了`のログが3回ずつ表示されている
   - 同一ファイルが3回読み込まれている（エンティティ総数=160が3回）
   - デバッグモードの切り替えが行われている（`デバッグモード: オフ`→`デバッグモード: オン`）

3. **エンティティハンドルの重複**:
   - 引き続き`Found non-unique entity handle #74, data validation is required.`が表示されている
   - この警告は各読み込み時に2回ずつ、計6回表示されている

4. **アプリケーション終了の重複**:
   - 依然として`DXFViewerアプリケーションを終了します`のログが2回表示されている

## コード分析

### 線幅設定に関連する部分

1. **グローバル定数の設定**:
   - `DEFAULT_LINE_WIDTH = 12.0` (基本設定セクション)
   - `DEFAULT_LINE_WIDTH_MIN = 1.0`
   - `DEFAULT_LINE_WIDTH_MAX = 20.0`

2. **AppSettingsクラス**:
   - `save_line_width(width)`: 線幅をQSettingsに保存
   - `load_line_width()`: QSettingsから線幅を読み込み（デフォルト値はDEFAULT_LINE_WIDTH）
   - `reset_line_width()`: 線幅設定をリセット（新たに追加された関数）

3. **線幅取得関数**:
   - `get_entity_lineweight(entity, app_settings, default_width=None)`: エンティティの線幅を取得
     - エンティティのlineweight属性があれば使用（DXFの値を10で割ってQt用に変換）
     - BYLAYERの場合はレイヤーの線幅を使用
     - それ以外はデフォルト値を返す

4. **エンティティ作成関数**:
   - `create_line`, `create_circle`, `create_arc`, `create_polyline`などの関数で
     `line_width = get_entity_lineweight(entity, app_settings) if entity else DEFAULT_LINE_WIDTH`
     を使って線幅を取得し、`pen.setWidthF(line_width)`でペンに設定

5. **DXFGraphicsViewクラス**:
   - 線の色（`line_color`）は設定されているが、線幅の設定はない
   - テーマ変更時に`line_color`は更新されるが、線幅は更新されない

6. **DXFViewerクラス**:
   - `load_dxf`メソッドでエンティティを読み込み、`process_dxf_entity`関数に渡す
   - `self.dxf_view.scene()`, `entity`, `self.dxf_view.line_color`, `self.app_settings`を渡す

7. **DXFファイル読み込みフロー**:
   - `load_and_display_dxf` → `load_dxf` → `process_dxf_entity` → エンティティごとに適切な描画関数を呼び出す
   - 同一ファイルが3回読み込まれている（ログから確認）
   - `load_and_display_dxf`メソッドのログ重複は修正されたが、別の要因で`load_dxf`が複数回呼び出されている

8. **初期化と設定のリセット**:
   - アプリケーション起動時に`app_settings.reset_line_width()`が呼び出され、線幅設定がリセットされている
   - これにより、デフォルト値の12.0が使用されるはずだが、複数回の読み込みにより上書きされている可能性がある

## ファイル読み込みの重複原因に関する仮説

1. **不要な自動再読み込み**:
   - 設定値の変更（テーマ変更や線幅変更）時に自動的にファイルを再読み込みする機能がある可能性
   - `reload_current_file`メソッドが複数箇所から呼び出されている

2. **イベント連鎖**:
   - 一つのイベント（ファイルを開く）が複数のイベントハンドラをトリガーしている可能性
   - 例：ファイルを開く → ビューをリセット → 何らかの設定変更 → ファイル再読み込み

3. **デバッグモード切り替えの影響**:
   - デバッグモードの切り替え（`デバッグモード: オフ`→`デバッグモード: オン`）が行われており、これがファイル再読み込みをトリガーしている可能性

4. **ファイルウォッチャーの誤動作**:
   - スクリプト自身の変更を監視する`QFileSystemWatcher`が誤ってDXFファイルの変更も検知している可能性

5. **初期化とリセットのタイミング**:
   - アプリケーション初期化時やビューリセット時に自動的にファイルを再読み込みしている可能性

## 考えられる原因と解決策

1. **QSettings内の値の問題**:
   - 修正：`reset_line_width`関数を追加し、アプリ起動時に呼び出す（すでに実装済み）
   - 効果：ログから確認できるように「線幅設定をリセットしました。デフォルト値 12.0 を使用します。」が表示されている

2. **線幅の計算と適用の問題**:
   - 修正：`get_entity_lineweight`関数にデバッグログを追加（すでに実装済み）
   - 不足情報：デバッグログには線幅計算過程の詳細が表示されていない（ログレベル不足）

3. **ファイル読み込みの重複**:
   - 修正案：ファイル読み込みの呼び出し元を特定し、不要な読み込みを防止する
   - 調査箇所：`reload_current_file`メソッドの呼び出し箇所、イベントハンドラの連鎖

4. **画面表示の問題**:
   - 修正案：線幅変更後の画面更新方法を見直す
   - 可能性：線幅変更が適切に適用されても、視覚的に効果が分かりにくい（ズーム率の問題）

## 今後の修正計画

1. **重複読み込みの解決**:
   - `load_dxf`メソッドの呼び出し元をすべて特定し、不要な呼び出しを防止する
   - 考えられる箇所：テーマ変更時、デバッグモード切り替え時、ビューリセット時など

2. **デバッグ情報の強化**:
   - デバッグログのレベルを上げて、線幅計算の詳細情報を確認する
   - できれば描画アイテムの実際の線幅をログに出力する

3. **ビジュアル検証機能の追加**:
   - 線幅がどの程度反映されているかを視覚的に確認できるテスト描画機能の追加
   - 例：異なる線幅（1.0, 5.0, 12.0, 20.0）のサンプル線を並べて表示する機能

4. **回避策としての強制線幅の実装**:
   - すべてのエンティティに対して強制的に特定の線幅（例：20.0）を設定する機能
   - これにより、DXFファイル内の設定に関わらず一貫した線幅表示が可能になる

## 次のステップ

1. `load_dxf`メソッドの呼び出し元をすべて特定する
2. 重複読み込みが発生している部分を修正する
3. デバッグログレベルを上げて、線幅計算の詳細を確認する
4. 異なる線幅でのテスト描画機能を実装して、視覚的に確認する 